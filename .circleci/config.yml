---
version: 2.1

# See https://circleci.com/orbs/registry/orb/circleci/gcp-gcr
orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.2
  docker: circleci/docker@2.5.0
  python: circleci/python@2.1.1
  gcp-cli: circleci/gcp-cli@3.1.1

parameters:
  python-version:
    type: string
    default: '3.10'

jobs:
  unit-tests:
    docker: &docker
      - image: python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - &restore_cache
        restore_cache:
          keys:
            # when lock files change, use increasingly general
            # patterns to restore cache
            - &cache_key # yamllint disable-line rule:line-length
              python-<< pipeline.parameters.python-version >>-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-{{ checksum "requirements.txt" }}
              # yamllint disable-line rule:line-length
            - python-<< pipeline.parameters.python-version >>-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-
            - python-<< pipeline.parameters.python-version >>-packages-v1-{{ .Branch }}-
            - python-<< pipeline.parameters.python-version >>-packages-v1-master-
            - python-<< pipeline.parameters.python-version >>-packages-v1-
      - &build
        run:
          name: Build
          command: |
            python -m venv venv/
            venv/bin/pip install pip-tools --constraint requirements.in
            venv/bin/pip-sync
      - run:
          name: PyTest with linters
          command: venv/bin/pytest
      - run:
          name: Flake8
          command: venv/bin/flake8 generator
      - run:
          name: Lint YAML
          command: venv/bin/yamllint -c .yamllint.yaml .
      - save_cache:
          paths:
            - venv/
          key: *cache_key
  verify-requirements:
    docker: *docker
    steps:
      - checkout
      - run:
          name: Verify that requirements.txt contains the right dependencies for
            this python version
          # use `--constraint` with `requirements.in` not `requirements.txt`
          # because for pip>=20.3 "Constraints are only allowed to take the form
          # of a package name and a version specifier"
          command: |
            pip install pip-tools --constraint requirements.in
            pip-compile --allow-unsafe --generate-hashes --quiet
            git diff --exit-code -G '^ *[^# ]' -- requirements.txt
  integration-tests:
    docker: *docker
    steps:
      - checkout
      - &skip_forked_pr
        run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Cannot pass creds to forked PRs," \
                "so marking this step successful"
              circleci step halt
            fi
      - *restore_cache
      - *build
      - run:
          name: PyTest Integration Test
          # Google's client libraries will check for
          # GOOGLE_APPLICATION_CREDENTIALS
          # and use a file in that location for credentials if present;
          # See https://cloud.google.com/docs/authentication/production
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
            echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
            venv/bin/pytest -m integration
  docs-build:
    docker: *docker
    steps:
      - checkout
      - *build
      - run:
          name: Build docs
          command: |
            venv/bin/pip install pdoc
            venv/bin/pdoc -o /tmp/_html generator
      - persist_to_workspace:
          root: /tmp
          paths: _html
  generate-lookml:
    docker: *docker
    steps: 
      - checkout
      - *skip_forked_pr
      - *restore_cache
      - *build
      - &attach_generated_lookml
        attach_workspace:
          at: /tmp/workspace
      - run:
          name: Authenticate to GCP
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
            echo 'export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"' >> "$BASH_ENV"
            echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
      - run:
          name: Generate LookML
          command: |
            ./bin/generator namespaces
            cat namespaces.yaml
            ./bin/generator lookml --target-dir=/tmp/workspace/generated-lookml --use_cloud_function=True
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - generated-lookml
  generate-diff:
    docker:
      - image: cimg/node:21.2.0
    steps:
      - checkout
      - *skip_forked_pr
      - *attach_generated_lookml
      - add_ssh_keys:
          fingerprints:
            - "f6:e8:0c:dd:e4:16:0c:4f:1a:5d:da:56:82:9e:a3:61"
      - run:
          name: Pull in looker-hub
          command: |
            git clone --branch main https://github.com/mozilla/looker-hub.git /tmp/workspace/looker-hub
      - run:
          name: Generate diff
          command: |
            # remove empty directories as they are not checked into looker-hub
            find /tmp/workspace/generated-lookml -type d -empty -delete

            # operational monitoring artifacts cannot be generated, copy from looker-hub so
            # they don't show up as missing.
            # todo: update operational monitoring logic so BigQuery access is not needed
            cp -R /tmp/workspace/looker-hub/operational_monitoring /tmp/workspace/generated-lookml
            yq eval -i 'del(.operational_monitoring)' /tmp/workspace/generated-lookml/namespaces.yaml
            yq eval -i 'del(.operational_monitoring)' /tmp/workspace/looker-hub/namespaces.yaml

            # the following files are only in looker-hub/ (manually checked in) and can be ignored
            rm /tmp/workspace/looker-hub/README.md
            rm /tmp/workspace/looker-hub/hub.model.lkml
            rm /tmp/workspace/looker-hub/CODE_OF_CONDUCT.md
            rm /tmp/workspace/looker-hub/firefox_ios/views/column_field_paths.view.lkml

            diff -x '.*' -qr --no-dereference \
              /tmp/workspace/looker-hub/ /tmp/workspace/generated-lookml/ \
              | grep '^Only in' \
              >> /tmp/workspace/lookml.diff || true
            diff -x '.*' -bur --no-dereference --new-file \
              /tmp/workspace/looker-hub/ /tmp/workspace/generated-lookml/ \
              >> /tmp/workspace/lookml.diff || true
      - store_artifacts:
          path: /tmp/workspace/lookml.diff
          destination: lookml.diff
      - run: npm i circle-github-bot@2.1.0 @octokit/graphql@7.0.2
      - run: .circleci/post-diff.js
  docs-deploy:
    docker:
      - image: node:14
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@3.0.0
            git config user.email "ci-build-docs@mozilla.com"
            git config user.name "ci-build-docs"
      - add_ssh_keys:
          fingerprints:
            - "f6:e8:0c:dd:e4:16:0c:4f:1a:5d:da:56:82:9e:a3:61"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages --message "[skip ci] updates" --dist /tmp/_html
  looker-deploy:
    executor: gcp-cli/google
    steps:
      - run:
          name: Prepare environment variables for OIDC authentication
          # Project ID is not used for OIDC authentication, but gcloud CLI requires a valid project ID.
          command: |
            echo 'export GOOGLE_PROJECT_ID="moz-fx-telemetry-airflow-prod"' >> "$BASH_ENV"
            echo "export OIDC_WIP_ID=$GCPV2_WORKLOAD_IDENTITY_POOL_ID" >> "$BASH_ENV"
            echo "export OIDC_WIP_PROVIDER_ID=$GCPV2_CIRCLECI_WORKLOAD_IDENTITY_PROVIDER" >> "$BASH_ENV"
            echo "export GOOGLE_PROJECT_NUMBER=$GCPV2_WORKLOAD_IDENTITY_POOL_PROJECT_NUMBER" >> "$BASH_ENV"
            echo "export OIDC_SERVICE_ACCOUNT_EMAIL=$GCP_SERVICE_ACCOUNT_EMAIL" >> "$BASH_ENV"
      - gcp-cli/setup:
          use_oidc: true
      - run:
          name: Generate API Token and DAG run note
          command: |
            echo "export DAGRUN_NOTE=\"DAG triggered by **[${CIRCLE_USERNAME}](https://github.com/${CIRCLE_USERNAME})** from ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} CI build [${CIRCLE_BUILD_NUM}](${CIRCLE_BUILD_URL})\"" >> "$BASH_ENV"
            echo "export ID_TOKEN=$(gcloud auth print-identity-token --impersonate-service-account ${GCP_SERVICE_ACCOUNT_EMAIL})" >> "$BASH_ENV"
      - run:
          name: Trigger looker DAG in Airflow to deploy lookml
          command: >
            curl --location --request POST "https://us-west1-moz-fx-telemetry-airflow-prod.cloudfunctions.net/ci-external-trigger"
            -H "Authorization: bearer ${ID_TOKEN}"
            -H "Content-Type:application/json"
            -d "{\"dagrun_note\": \"${DAGRUN_NOTE}\", \"dag_id\":\"looker\"}"
  build-container:
    executor: docker/docker
    working_directory: ~/mozilla/lookml-generator
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build -t app:build .

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - unit-tests
      - integration-tests:
          context: data-eng-circleci-tests

      - verify-requirements
      - build-container
      - docs-build

      - generate-lookml:
          context: data-eng-circleci-tests
          filters:
            branches:
              ignore: main

      - generate-diff:
          requires:
            - generate-lookml
          filters:
            branches:
              ignore: main

      - docs-deploy:
          requires:
            - docs-build
            - unit-tests
            - verify-requirements
            - integration-tests
          filters:
            branches:
              only: main

      - gcp-gcr/build-and-push-image:
          name: Build and push lookml-generator
          context: data-eng-airflow-gcr
          requires:
            - unit-tests
            - verify-requirements
            - integration-tests
            - build-container
          image: lookml-generator
          filters:
            branches:
              only: main

      - gcp-gcr/add-image-tag:
          name: Add commit hash as docker image tag
          context: data-eng-airflow-gcr
          requires:
            - Build and push lookml-generator
          image: lookml-generator
          source-tag: latest
          target-tag: $CIRCLE_SHA1
          filters:
            branches:
              only: main

      - looker-deploy:
          name: Trigger looker Airflow DAG to deploy lookml
          context: gcpv2-workload-identity
          requires:
            - Add commit hash as docker image tag
          filters:
            branches:
              only:
                - main
