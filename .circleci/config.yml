---
version: 2.1

# See https://circleci.com/orbs/registry/orb/circleci/gcp-gcr
orbs:
  gcp-gcr: circleci/gcp-gcr@0.16.2
  docker: circleci/docker@2.5.0
  python: circleci/python@2.1.1

parameters:
  python-version:
    type: string
    default: '3.10'

jobs:
  unit-tests:
    docker: &docker
      - image: python:<< pipeline.parameters.python-version >>
    steps:
      - checkout
      - &restore_cache
        restore_cache:
          keys:
            # when lock files change, use increasingly general
            # patterns to restore cache
            - &cache_key # yamllint disable-line rule:line-length
              python-<< pipeline.parameters.python-version >>-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-{{ checksum "requirements.txt" }}
              # yamllint disable-line rule:line-length
            - python-<< pipeline.parameters.python-version >>-packages-v1-{{ .Branch }}-{{ checksum "requirements.in" }}-
            - python-<< pipeline.parameters.python-version >>-packages-v1-{{ .Branch }}-
            - python-<< pipeline.parameters.python-version >>-packages-v1-master-
            - python-<< pipeline.parameters.python-version >>-packages-v1-
      - &build
        run:
          name: Build
          command: |
            python -m venv venv/
            venv/bin/pip install pip-tools --constraint requirements.in
            venv/bin/pip-sync
      - run:
          name: PyTest with linters
          command: venv/bin/pytest
      - run:
          name: Lint YAML
          command: venv/bin/yamllint -c .yamllint.yaml .
      - save_cache:
          paths:
            - venv/
          key: *cache_key
  verify-requirements:
    docker: *docker
    steps:
      - checkout
      - run:
          name: Verify that requirements.txt contains the right dependencies for
            this python version
          # use `--constraint` with `requirements.in` not `requirements.txt`
          # because for pip>=20.3 "Constraints are only allowed to take the form
          # of a package name and a version specifier"
          command: |
            pip install pip-tools --constraint requirements.in
            pip-compile --allow-unsafe --generate-hashes --quiet
            git diff --exit-code -G '^ *[^# ]' -- requirements.txt
  integration-tests:
    docker: *docker
    steps:
      - checkout
      - &skip_forked_pr
        run:
          name: Early return if this build is from a forked PR
          command: |
            if [ -n "$CIRCLE_PR_NUMBER" ]; then
              echo "Cannot pass creds to forked PRs," \
                "so marking this step successful"
              circleci step halt
            fi
      - *restore_cache
      - *build
      - run:
          name: PyTest Integration Test
          # Google's client libraries will check for
          # GOOGLE_APPLICATION_CREDENTIALS
          # and use a file in that location for credentials if present;
          # See https://cloud.google.com/docs/authentication/production
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
            echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
            venv/bin/pytest -m integration
      - run:
          name: Test build namespaces.yaml
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS="/tmp/gcp.json"
            echo "$GCLOUD_SERVICE_KEY" > "$GOOGLE_APPLICATION_CREDENTIALS"
            ./bin/generator namespaces
            cat namespaces.yaml
  docs-build:
    docker: *docker
    steps:
      - checkout
      - *build
      - run:
          name: Build docs
          command: |
            venv/bin/pip install pdoc
            venv/bin/pdoc -o /tmp/_html generator
      - persist_to_workspace:
          root: /tmp
          paths: _html

  docs-deploy:
    docker:
      - image: node:14
    steps:
      - checkout
      - attach_workspace:
          at: /tmp
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@3.0.0
            git config user.email "ci-build-docs@mozilla.com"
            git config user.name "ci-build-docs"
      - add_ssh_keys:
          fingerprints:
            - "f6:e8:0c:dd:e4:16:0c:4f:1a:5d:da:56:82:9e:a3:61"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages --message "[skip ci] updates" --dist /tmp/_html

  build-container:
    executor: docker/docker
    working_directory: ~/mozilla/lookml-generator
    steps:
      - checkout
      - setup_remote_docker
      - run: docker build -t app:build .

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - unit-tests
      - integration-tests:
          context: data-eng-circleci-tests

      - verify-requirements
      - build-container
      - docs-build

      - docs-deploy:
          requires:
            - docs-build
            - unit-tests
            - verify-requirements
            - integration-tests
          filters:
            branches:
              only: main

      - gcp-gcr/build-and-push-image:
          name: Build and push lookml-generator
          context: data-eng-airflow-gcr
          requires:
            - unit-tests
            - verify-requirements
            - integration-tests
            - build-container
          image: lookml-generator
          filters:
            branches:
              only: main

      - gcp-gcr/add-image-tag:
          name: Add commit hash as docker image tag
          context: data-eng-airflow-gcr
          requires:
            - Build and push lookml-generator
          image: lookml-generator
          source-tag: latest
          target-tag: $CIRCLE_SHA1
          filters:
            branches:
              only: main
